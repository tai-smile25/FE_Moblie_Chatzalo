import React, { useState, useEffect, useRef } from 'react';
import { View, StyleSheet, TouchableOpacity, TextInput, StatusBar, FlatList, KeyboardAvoidingView, Platform, ScrollView, Alert, Image, Linking, Modal } from 'react-native';
import { Text, Avatar } from '@rneui/themed';
import { useNavigation, useRoute } from '@react-navigation/native';
import { Ionicons } from '@expo/vector-icons';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from '../navigation/AppNavigator';
import { 
  getMessages, 
  sendMessage, 
  markMessageAsRead, 
  uploadFile,
  addReaction,
  recallMessage, 
  deleteMessage,
  getFriends,
  Message
} from '../services/api';
import { formatDistanceToNow } from 'date-fns';
import { vi } from 'date-fns/locale';
import { io } from 'socket.io-client';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as DocumentPicker from 'expo-document-picker';
import * as FileSystem from 'expo-file-system';
import * as ImagePicker from 'expo-image-picker';
import type { Friend } from '../services/api';
import * as Clipboard from 'expo-clipboard';
import { API_BASE_URL } from '@env';
import { SafeAreaView } from 'react-native-safe-area-context';

type NavigationProp = NativeStackNavigationProp<RootStackParamList>;

type RouteParams = {
  receiverEmail: string;
  fullName: string;
  avatar: string;
  lastSeen?: string;
  messageToForward?: Message;
};

interface MessageReaction {
  messageId: string;
  reaction: string;
  senderEmail: string;
}

const EMOJIS = [
  // M·∫∑t c∆∞·ªùi
  'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá', 'üôÇ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö',
  'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü§©', 'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ',
  '‚òπÔ∏è', 'üò£', 'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨', 'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±', 'üò®',
  
  // C·ª≠ ch·ªâ v√† con ng∆∞·ªùi
  'üëã', 'ü§ö', '‚úã', 'üñêÔ∏è', 'üëå', 'ü§å', 'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üëá', '‚òùÔ∏è', 'üëç',
  'üëé', '‚úä', 'üëä', 'ü§õ', 'ü§ú', 'üëè', 'üôå', 'üëê', 'ü§≤', 'ü§ù', 'üôè', 'üí™', 'ü¶æ', 'üß†', 'ü´Ä', 'ü´Å', 'ü¶∑', 'ü¶¥',
  
  // Tr√°i tim v√† t√¨nh c·∫£m
  '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'ü§é', 'üñ§', 'ü§ç', 'üíØ', 'üí¢', 'üí•', 'üí´', 'üí¶', 'üí®', 'üï≥Ô∏è', 'üí£', 'üí¨',
  'üëÅÔ∏è‚Äçüó®Ô∏è', 'üó®Ô∏è', 'üóØÔ∏è', 'üí≠', 'üí§', 'üíù', 'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíï', 'üíü', '‚ù£Ô∏è', 'üíî', '‚ú®',
  
  // ƒê·ªông v·∫≠t
  'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ', 'üôà', 'üôâ', 'üôä',
  
  // Th·ª©c ƒÉn v√† ƒë·ªì u·ªëng
  '‚òï', 'ü´ñ', 'üçµ', 'üßÉ', 'ü•§', 'üßã', 'üç∫', 'üçª', 'ü•Ç', 'üç∑', 'ü•É', 'üç∏', 'üçπ', 'üßâ', 'üçæ', 'üçΩÔ∏è', 'üç¥', 'ü•Ñ',
  'üç¨', 'üç≠', 'üç´', 'üçø', 'üç™', 'üç©', 'üçØ', 'üßÇ', 'üçñ', 'üçó', 'ü•©', 'ü•ì', 'üçî', 'üçü', 'üå≠', 'ü•™',
  
  // Ho·∫°t ƒë·ªông
  '‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'üé±', 'üéÆ', 'üé≤', '‚ôüÔ∏è', 'üé≠', 'üé®', 'üé¨', 'üé§', 'üéß', 'üéº',
  
  // Thi√™n nhi√™n v√† th·ªùi ti·∫øt
  'üå∏', 'üíÆ', 'üèµÔ∏è', 'üåπ', 'ü•Ä', 'üå∫', 'üåª', 'üåº', 'üå∑', 'üå±', 'ü™¥', 'üå≤', 'üå≥', 'üå¥', 'üåµ', 'üåæ', 'üåø', '‚òòÔ∏è',
  'üçÄ', 'üçÅ', 'üçÇ', 'üçÉ', 'üåç', 'üåé', 'üåè', 'üåë', 'üåí', 'üåì', 'üåî', 'üåï', 'üåñ', 'üåó', 'üåò', 'üåô', 'üåö', 'üåõ',
  '‚≠ê', 'üåü', '‚ú®', '‚ö°', '‚òÑÔ∏è', 'üí•', 'üî•', 'üå™Ô∏è', 'üåà', '‚òÄÔ∏è', 'üå§Ô∏è', '‚õÖ', 'üå•Ô∏è', '‚òÅÔ∏è', 'üå¶Ô∏è', 'üåßÔ∏è', '‚õàÔ∏è', 'üå©Ô∏è',
  
  // ƒê·ªëi t∆∞·ª£ng
  'üíé', 'üíç', 'üîî', 'üéµ', 'üé∂', 'üöó', '‚úàÔ∏è', 'üöÄ', '‚åö', 'üì±', 'üíª', '‚å®Ô∏è', 'üñ®Ô∏è', 'üí°', 'üî¶'
];

const REACTIONS = [
  { emoji: '‚ù§Ô∏è', name: 'heart', type: 'reaction' },
  { emoji: 'üëç', name: 'thumbsup', type: 'reaction' },
  { emoji: 'üòÑ', name: 'haha', type: 'reaction' },
  { emoji: 'üòÆ', name: 'wow', type: 'reaction' },
  { emoji: 'üò¢', name: 'sad', type: 'reaction' },
  { emoji: 'üò†', name: 'angry', type: 'reaction' }
];

const ChatScreen = () => {
  const navigation = useNavigation<NavigationProp>();
  const route = useRoute();
  const { receiverEmail, fullName, avatar, lastSeen, messageToForward } = route.params as RouteParams;
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [isTyping, setIsTyping] = useState(false);
  const flatListRef = useRef<FlatList>(null);
  const socket = useRef<any>(null);
  const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const [hasInteracted, setHasInteracted] = useState(false);
  const [showEmojis, setShowEmojis] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [selectedMessage, setSelectedMessage] = useState<Message | null>(null);
  const [showReactions, setShowReactions] = useState(false);
  const [selectedMessageForActions, setSelectedMessageForActions] = useState<Message | null>(null);
  const [showMessageActions, setShowMessageActions] = useState(false);
  const [showForwardModal, setShowForwardModal] = useState(false);
  const [friends, setFriends] = useState<Friend[]>([]);
  const [searchQuery, setSearchQuery] = useState('');

  // Add useEffect to monitor isTyping changes
  useEffect(() => {
    console.log('isTyping changed:', isTyping);
  }, [isTyping]);

  // S·ª≠a l·∫°i useEffect cho auto-scrolling
  useEffect(() => {
    if (messages.length > 0 && flatListRef.current) {
      // Cu·ªôn xu·ªëng cu·ªëi khi c√≥ tin nh·∫Øn m·ªõi
      flatListRef.current.scrollToEnd({ animated: true });
    }
  }, [messages]);

  useEffect(() => {
    const initializeSocket = async () => {
      try {
        const token = await AsyncStorage.getItem('token');
        console.log('Token from AsyncStorage:', token ? 'exists' : 'not found');
        
        if (!token) {
          console.error('No token found');
          return;
        }

        // Initialize socket connection
        const socketUrl = API_BASE_URL;
        console.log('Initializing socket connection to:', socketUrl);
        
        if (socket.current) {
          console.log('Disconnecting existing socket');
          socket.current.disconnect();
        }
        
        socket.current = io(socketUrl, {
          transports: ['websocket', 'polling'],
          upgrade: true,
          rememberUpgrade: true,
          auth: {
            token
          },
          reconnection: true,
          reconnectionAttempts: 5,
          reconnectionDelay: 1000,
          timeout: 20000,
          path: '/socket.io/'
        });

        // Log socket connection status
        socket.current.on('connect', () => {
          console.log('Socket connected successfully with ID:', socket.current?.id);
        });

        socket.current.on('connect_error', (error: Error) => {
          console.error('Socket connection error:', error.message);
        });

        socket.current.on('error', (error: Error) => {
          console.error('Socket error:', error.message);
        });

        socket.current.on('disconnect', (reason: string) => {
          console.log('Socket disconnected:', reason);
        });

        // Load messages
        loadMessages();

        // Socket event listeners
        socket.current.on('newMessage', (message: Message) => {
          console.log('Received new message:', message);
          if (message.senderEmail === receiverEmail) {
            setMessages(prev => {
              const messageExists = prev.some(msg => msg.messageId === message.messageId);
              if (!messageExists) {
                return [...prev, message];
              }
              return prev;
            });
            
            if (hasInteracted) {
              markMessageAsRead(message.messageId);
              if (socket.current) {
                socket.current.emit('messageRead', {
                  messageId: message.messageId,
                  senderEmail: message.senderEmail
                });
              }
            }
          }
        });

        socket.current.on('messageRead', (data: { messageId: string }) => {
          console.log('Message read:', data.messageId);
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ ƒë·ªçc cho tin nh·∫Øn ngay l·∫≠p t·ª©c
          setMessages(prev => prev.map(msg => 
            msg.messageId === data.messageId ? { ...msg, status: 'read' } : msg
          ));
        });

        // Add typing indicator listeners with console logs
        socket.current.on('typingStart', (data: { senderEmail: string }) => {
          console.log('Received typingStart event:', data);
          console.log('Current receiver email:', receiverEmail);
          console.log('Comparing emails:', data.senderEmail === receiverEmail);
          
          // S·ª≠a l·∫°i ƒëi·ªÅu ki·ªán: hi·ªÉn th·ªã khi ng∆∞·ªùi kh√°c ƒëang g√µ
          // Th·ª≠ c·∫£ hai ƒëi·ªÅu ki·ªán ƒë·ªÉ xem ƒëi·ªÅu n√†o ho·∫°t ƒë·ªông
          if (data.senderEmail !== receiverEmail) {
            console.log('Setting isTyping to true (senderEmail !== receiverEmail)');
            setIsTyping(true);
          } else {
            console.log('Setting isTyping to true (senderEmail === receiverEmail)');
            setIsTyping(true);
          }
        });

        socket.current.on('typingStop', (data: { senderEmail: string }) => {
          console.log('Received typingStop event:', data);
          console.log('Current receiver email:', receiverEmail);
          console.log('Comparing emails:', data.senderEmail === receiverEmail);
          
          // S·ª≠a l·∫°i ƒëi·ªÅu ki·ªán: ·∫©n khi ng∆∞·ªùi kh√°c d·ª´ng g√µ
          // Th·ª≠ c·∫£ hai ƒëi·ªÅu ki·ªán ƒë·ªÉ xem ƒëi·ªÅu n√†o ho·∫°t ƒë·ªông
          if (data.senderEmail !== receiverEmail) {
            console.log('Setting isTyping to false (senderEmail !== receiverEmail)');
            setIsTyping(false);
          } else {
            console.log('Setting isTyping to false (senderEmail === receiverEmail)');
            setIsTyping(false);
          }
        });

        socket.current.on('messageReaction', (data: { messageId: string, reaction: string, senderEmail: string }) => {
          console.log('Received messageReaction event:', data);
          setMessages(prevMessages => {
            console.log('Updating messages for reaction:', data.messageId);
            return prevMessages.map(msg => {
              if (msg.messageId === data.messageId) {
                console.log('Found message to add reaction:', msg.messageId);
                return {
                  ...msg,
                  reactions: [...(msg.reactions || []), {
                    messageId: data.messageId,
                    reaction: data.reaction,
                    senderEmail: data.senderEmail
                  }]
                };
              }
              return msg;
            });
          });
        });

        socket.current.on('messageReactionConfirmed', (data: { success: boolean, messageId: string, reaction: string, error?: string }) => {
          console.log('Message reaction confirmation:', data);
          if (!data.success) {
            Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ th·∫£ c·∫£m x√∫c. Vui l√≤ng th·ª≠ l·∫°i.');
          }
        });

        socket.current.on('messageRecalled', (data: { messageId: string, senderEmail: string }) => {
          console.log('Received messageRecalled event:', data);
          setMessages(prevMessages => {
            console.log('Updating messages for recall:', data.messageId);
            return prevMessages.map(msg => {
              if (msg.messageId === data.messageId) {
                console.log('Found message to recall:', msg.messageId);
                return {
                  ...msg,
                  isRecalled: true,
                  content: 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c thu h·ªìi'
                };
              }
              return msg;
            });
          });
        });

        socket.current.on('messageDeleted', (data: { messageId: string }) => {
          console.log('Received messageDeleted event:', data);
          setMessages(prevMessages => {
            console.log('Removing deleted message:', data.messageId);
            return prevMessages.filter(msg => msg.messageId !== data.messageId);
          });
        });

        // Confirmation handlers
        socket.current.on('messageRecallConfirmed', (data: { success: boolean, messageId: string, error?: string }) => {
          console.log('Message recall confirmation:', data);
          if (!data.success) {
            Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ thu h·ªìi tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.');
          }
        });

        socket.current.on('messageDeleteConfirmed', (data: { success: boolean, messageId: string, error?: string }) => {
          console.log('Message delete confirmation:', data);
          if (!data.success) {
            Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.');
          }
        });

        return () => {
          if (socket.current) {
            console.log('Cleaning up socket connection');
            socket.current.disconnect();
          }
          if (typingTimeoutRef.current) {
            clearTimeout(typingTimeoutRef.current);
          }
        };
      } catch (error) {
        console.error('Error initializing socket:', error);
      }
    };

    initializeSocket();
  }, [receiverEmail]); // Add receiverEmail to dependencies

  // Th√™m h√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng t∆∞∆°ng t√°c v·ªõi m√†n h√¨nh
  const handleScreenFocus = () => {
    setHasInteracted(true);
    // Ch·ªâ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc khi ng∆∞·ªùi d√πng th·ª±c s·ª± t∆∞∆°ng t√°c
    if (messages.length > 0) {
      messages.forEach(msg => {
        if (msg.status !== 'read' && msg.senderEmail === receiverEmail) {
          // ƒê√°nh d·∫•u tin nh·∫Øn l√† ƒë√£ ƒë·ªçc
          markMessageAsRead(msg.messageId).then(() => {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn trong state
            setMessages(prev => prev.map(m => 
              m.messageId === msg.messageId ? { ...m, status: 'read' } : m
            ));
            
            // Emit s·ª± ki·ªán messageRead
            if (socket.current) {
              socket.current.emit('messageRead', {
                messageId: msg.messageId,
                senderEmail: msg.senderEmail
              });
            }
          });
        }
      });
    }
  };

  // Th√™m useEffect ƒë·ªÉ theo d√µi khi m√†n h√¨nh ƒë∆∞·ª£c focus
  useEffect(() => {
    const unsubscribe = navigation.addListener('focus', handleScreenFocus);
    return unsubscribe;
  }, [navigation, messages, receiverEmail]);

  const loadMessages = async () => {
    try {
      console.log('Loading messages for:', receiverEmail);
      const response = await getMessages(receiverEmail);
      if (response.success) {
        // S·∫Øp x·∫øp tin nh·∫Øn theo th·ªùi gian tƒÉng d·∫ßn (c≈© nh·∫•t l√™n ƒë·∫ßu)
        const sortedMessages = response.data.sort((a, b) => {
          const dateA = new Date(a.createdAt).getTime();
          const dateB = new Date(b.createdAt).getTime();
          return dateA - dateB;
        });
        setMessages(sortedMessages);
        
        // Mark messages as read if user has interacted with the screen
        if (hasInteracted) {
          const unreadMessages = sortedMessages.filter(
            msg => msg.status !== 'read' && msg.senderEmail === receiverEmail
          );
          
          // Batch mark messages as read
          if (unreadMessages.length > 0) {
            const messageIds = unreadMessages.map(msg => msg.messageId);
            if (socket.current) {
              socket.current.emit('messagesRead', {
                messageIds,
                senderEmail: receiverEmail
              });
            }
          }
        }
      }
    } catch (error) {
      console.error('Error loading messages:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSendMessage = async () => {
    if (!newMessage.trim()) return;

    try {
      console.log('Sending message to:', receiverEmail);
      const response = await sendMessage(receiverEmail, newMessage.trim());
      if (response.success) {
        // Add new message to the end of the array
        setMessages(prev => [...prev, response.data]);
        setNewMessage('');

        // Emit socket event
        if (socket.current) {
          socket.current.emit('newMessage', {
            receiverEmail,
            message: response.data
          });
        }
      }
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  const handleTypingStart = () => {
    console.log('Emitting typingStart event to:', receiverEmail);
    if (socket.current) {
      // G·ª≠i s·ª± ki·ªán typingStart v·ªõi email c·ªßa ng∆∞·ªùi g·ª≠i (ng∆∞·ªùi ƒëang g√µ)
      socket.current.emit('typingStart', { receiverEmail });
      // Th√™m log ƒë·ªÉ debug
      console.log('Typing start event emitted');
    }
  };

  const handleTypingStop = () => {
    console.log('Emitting typingStop event to:', receiverEmail);
    if (socket.current) {
      // G·ª≠i s·ª± ki·ªán typingStop v·ªõi email c·ªßa ng∆∞·ªùi g·ª≠i (ng∆∞·ªùi ƒëang g√µ)
      socket.current.emit('typingStop', { receiverEmail });
      // Th√™m log ƒë·ªÉ debug
      console.log('Typing stop event emitted');
    }
  };

  const handleMessageChange = (text: string) => {
    setNewMessage(text);
    
    // X√≥a timeout c≈© n·∫øu c√≥
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
    }

    // G·ª≠i s·ª± ki·ªán b·∫Øt ƒë·∫ßu g√µ
    handleTypingStart();

    // ƒê·∫∑t timeout m·ªõi ƒë·ªÉ d·ª´ng g√µ sau 1 gi√¢y
    typingTimeoutRef.current = setTimeout(() => {
      handleTypingStop();
    }, 1000);
  };

  const handleEmojiPress = (emoji: string) => {
    setNewMessage(prev => prev + emoji);
    setShowEmojis(false); // ·∫®n b·∫£ng emoji sau khi ch·ªçn
  };

  const handleFilePick = async () => {
    try {
      const result = await DocumentPicker.getDocumentAsync({
        type: '*/*',
        copyToCacheDirectory: true
      });

      if (result.assets && result.assets.length > 0) {
        await handleFileUpload(result.assets[0]);
      }
    } catch (error) {
      console.error('Error picking file:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ ch·ªçn file. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const handleFileUpload = async (fileAsset: {
    uri: string;
    name: string;
    mimeType?: string;
    size?: number;
  }) => {
    try {
      setUploading(true);
      
      // Get file info
      const fileInfo = await FileSystem.getInfoAsync(fileAsset.uri);
      if (!fileInfo.exists) {
        throw new Error('Kh√¥ng th·ªÉ truy c·∫≠p file');
      }

      // Create form data
      const formData = new FormData();
      formData.append('file', {
        uri: Platform.OS === 'android' ? fileAsset.uri : fileAsset.uri.replace('file://', ''),
        type: fileAsset.mimeType || 'application/octet-stream',
        name: fileAsset.name,
      } as any);

      // Upload file
      const response = await uploadFile(formData);
      
      if (response.success) {
        // S·ª≠ d·ª•ng URL S3 tr·ª±c ti·∫øp
        const fileUrl = response.data.url;
        
        // Send message with file URL and metadata
        const messageResponse = await sendMessage(
          receiverEmail,
          fileUrl,
          'file',
          {
            fileName: fileAsset.name,
            fileSize: fileAsset.size || fileInfo.size || 0,
            fileType: fileAsset.mimeType || 'application/octet-stream'
          }
        );

        if (messageResponse.success) {
          setMessages(prev => {
            const messageExists = prev.some(msg => msg.messageId === messageResponse.data.messageId);
            if (!messageExists) {
              return [...prev, messageResponse.data];
            }
            return prev;
          });

          // Emit socket event
          if (socket.current) {
            socket.current.emit('newMessage', {
              receiverEmail,
              message: messageResponse.data
            });
          }
        }
      }
    } catch (error: any) {
      console.error('Error uploading file:', error);
      let errorMessage = 'Kh√¥ng th·ªÉ t·∫£i l√™n file';
      
      if (error.message) {
        errorMessage = error.message;
      } else if (error.error) {
        errorMessage = error.error;
      } else if (error.code === 'ECONNABORTED') {
        errorMessage = 'K·∫øt n·ªëi qu√° l√¢u. Vui l√≤ng th·ª≠ l·∫°i.';
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      }
      
      Alert.alert('L·ªói', errorMessage);
    } finally {
      setUploading(false);
    }
  };

  const handleImagePick = async () => {
    try {
      // Request permissions
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permission needed', 'Please grant permission to access your photos');
        return;
      }

      // Pick image with compression
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [4, 3],
        quality: 0.5, // Reduce quality to 50%
        base64: false,
        exif: false,
      });

      if (!result.canceled && result.assets && result.assets.length > 0) {
        const selectedImage = result.assets[0];
        
        // Check file size
        const fileInfo = await FileSystem.getInfoAsync(selectedImage.uri);
        if (!fileInfo.exists) {
          Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ truy c·∫≠p file ·∫£nh');
          return;
        }
        
        const fileSize = (fileInfo as any).size;
        if (fileSize && fileSize > 10 * 1024 * 1024) { // 10MB limit
          Alert.alert('L·ªói', 'K√≠ch th∆∞·ªõc ·∫£nh qu√° l·ªõn. Vui l√≤ng ch·ªçn ·∫£nh nh·ªè h∆°n 10MB.');
          return;
        }

        setUploading(true);

        try {
          // Create form data with compressed image
          const formData = new FormData();
          formData.append('file', {
            uri: selectedImage.uri,
            type: 'image/jpeg',
            name: 'image.jpg',
          } as any);

          // Upload image with timeout handling
          const uploadResponse = await Promise.race([
            uploadFile(formData),
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error('Upload timeout')), 30000) // 30 second timeout
            )
          ]);
          
          if (uploadResponse.success) {
            // Send message with image URL
            const messageResponse = await sendMessage(
              receiverEmail,
              uploadResponse.data.url,
              'image',
              {
                fileName: uploadResponse.data.originalname,
                fileSize: uploadResponse.data.size,
                fileType: uploadResponse.data.mimetype
              }
            );

            if (messageResponse.success) {
              setMessages(prev => {
                const messageExists = prev.some(msg => msg.messageId === messageResponse.data.messageId);
                if (!messageExists) {
                  return [...prev, messageResponse.data];
                }
                return prev;
              });

              // Emit socket event
              if (socket.current) {
                socket.current.emit('newMessage', {
                  receiverEmail,
                  message: messageResponse.data
                });
              }
            }
          } else {
            throw new Error('Upload failed');
          }
        } catch (error: any) {
          console.error('Error uploading image:', error);
          let errorMessage = 'Kh√¥ng th·ªÉ t·∫£i l√™n ·∫£nh';
          
          if (error.message === 'Upload timeout') {
            errorMessage = 'T·∫£i l√™n ·∫£nh qu√° th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i.';
          } else if (error.response?.data?.message) {
            errorMessage = error.response.data.message;
          }
          
          Alert.alert('L·ªói', errorMessage);
        }
      }
    } catch (error) {
      console.error('Error picking image:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ ch·ªçn ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setUploading(false);
    }
  };

  const handleVideoPick = async () => {
    try {
      // Request permissions
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permission needed', 'Please grant permission to access your videos');
        return;
      }

      // Pick video
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Videos,
        allowsEditing: true,
        quality: 1,
      });

      if (!result.canceled && result.assets && result.assets.length > 0) {
        const selectedVideo = result.assets[0];
        setUploading(true);

        // Create form data
        const formData = new FormData();
        formData.append('file', {
          uri: selectedVideo.uri,
          type: 'video/mp4',
          name: 'video.mp4',
        } as any);

        try {
          // Upload video
          const uploadResponse = await uploadFile(formData);
          
          if (uploadResponse.success) {
            // Send message with video URL
            const messageResponse = await sendMessage(
              receiverEmail,
              uploadResponse.data.url,
              'video',
              {
                fileName: uploadResponse.data.originalname,
                fileSize: uploadResponse.data.size,
                fileType: uploadResponse.data.mimetype
              }
            );

            if (messageResponse.success) {
              setMessages(prev => {
                const messageExists = prev.some(msg => msg.messageId === messageResponse.data.messageId);
                if (!messageExists) {
                  return [...prev, messageResponse.data];
                }
                return prev;
              });

              // Emit socket event
              if (socket.current) {
                socket.current.emit('newMessage', {
                  receiverEmail,
                  message: messageResponse.data
                });
              }
            }
          }
        } catch (error) {
          console.error('Error uploading video:', error);
          Alert.alert('Error', 'Failed to upload video. Please try again.');
        }
      }
    } catch (error) {
      console.error('Error picking video:', error);
      Alert.alert('Error', 'Failed to pick video. Please try again.');
    } finally {
      setUploading(false);
    }
  };

  const handleReaction = async (messageId: string, reaction: string) => {
    try {
      const response = await addReaction(messageId, reaction);
      if (response) {
        // Update the message in the messages state
        setMessages(prevMessages => 
          prevMessages.map(msg => 
            msg.messageId === messageId ? response : msg
          )
        );
      }
    } catch (error) {
      console.error('Error adding reaction:', error);
    }
  };

  const handleRecall = async (messageId: string) => {
    try {
      const response = await recallMessage(messageId);
      if (response) {
        // Update the message in the messages state
        setMessages(prevMessages => 
          prevMessages.map(msg => 
            msg.messageId === messageId ? response : msg
          )
        );
      }
    } catch (error) {
      console.error('Error recalling message:', error);
    }
  };

  const handleDelete = async (messageId: string) => {
    try {
      // G·ªçi API x√≥a tin nh·∫Øn ch·ªâ cho ng∆∞·ªùi g·ª≠i
      await deleteMessage(messageId);
      // Ch·ªâ x√≥a tin nh·∫Øn kh·ªèi state local
      setMessages(prevMessages => 
        prevMessages.filter(msg => msg.messageId !== messageId)
      );
      Alert.alert('Th√†nh c√¥ng', 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c x√≥a');
    } catch (error) {
      console.error('Error deleting message:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  // Add useEffect to load friends when forward modal is opened
  useEffect(() => {
    if (showForwardModal) {
      loadFriends();
    }
  }, [showForwardModal]);

  const loadFriends = async () => {
    try {
      const response = await getFriends();
      if (response.success) {
        setFriends(response.data);
      }
    } catch (error) {
      console.error('Error loading friends:', error);
    }
  };

  const handleForwardMessage = async (message: Message, receiverEmail: string) => {
    try {
      // Forward the message to the selected receiver
      const response = await sendMessage(
        receiverEmail,
        message.content,
        message.type,
        message.metadata ? {
          fileName: message.metadata.fileName || '',
          fileSize: message.metadata.fileSize || 0,
          fileType: message.metadata.fileType || ''
        } : undefined
      );

      if (response.success) {
        // Add the forwarded message to the messages state
        setMessages(prevMessages => [...prevMessages, response.data]);
        
        // Emit socket event for the forwarded message
        if (socket.current) {
          socket.current.emit('newMessage', {
            receiverEmail,
            message: response.data
          });
        }
        Alert.alert('Th√†nh c√¥ng', 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ti·∫øp');
      }
    } catch (error) {
      console.error('Error forwarding message:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ chuy·ªÉn ti·∫øp tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.');
    }
    setShowForwardModal(false);
    setShowMessageActions(false);
  };

  const handleCopyText = (message: Message) => {
    if (message.content) {
      // Copy text to clipboard
      const textToCopy = message.isRecalled ? 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c thu h·ªìi' : message.content;
      Clipboard.setString(textToCopy);
      Alert.alert('Th√†nh c√¥ng', 'ƒê√£ sao ch√©p vƒÉn b·∫£n');
    }
    setShowReactions(false);
  };

  const handleForwardFromReaction = (message: Message) => {
    setSelectedMessageForActions(message);
    setShowReactions(false);
    setShowForwardModal(true);
  };

  const renderMessage = ({ item }: { item: Message }) => {
    const isMe = item.senderEmail !== receiverEmail;

    // Hi·ªÉn th·ªã tin nh·∫Øn ƒë√£ thu h·ªìi
    if (item.isRecalled) {
      return (
        <View style={[styles.messageContainer, isMe ? styles.myMessage : styles.theirMessage]}>
          {!isMe && (
            <Avatar
              rounded
              source={{ uri: avatar || 'https://randomuser.me/api/portraits/men/1.jpg' }}
              size={30}
              containerStyle={styles.avatar}
            />
          )}
          <View style={[styles.messageBubble, styles.recalledBubble]}>
            <Text style={styles.recalledText}>Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c thu h·ªìi</Text>
          </View>
        </View>
      );
    }

    const isFileMessage = (content: string) => {
      // Ki·ªÉm tra n·∫øu l√† URL S3 v√† kh√¥ng ph·∫£i l√† h√¨nh ·∫£nh
      return content.includes('uploads3cnm.s3.amazonaws.com') && !isImageMessage(item);
    };

    const isImageMessage = (message: Message) => {
      // Ki·ªÉm tra n·∫øu l√† tin nh·∫Øn h√¨nh ·∫£nh ho·∫∑c file c√≥ ƒë·ªãnh d·∫°ng h√¨nh ·∫£nh
      if (message.type === 'image') return true;
      if (message.metadata?.fileType?.startsWith('image/')) return true;
      // Ki·ªÉm tra ƒëu√¥i file trong URL
      const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'];
      const url = message.content.toLowerCase();
      return imageExtensions.some(ext => url.endsWith(`.${ext}`));
    };

    const getFileInfo = (url: string) => {
      try {
        // Decode URL ƒë·ªÉ l·∫•y t√™n file g·ªëc
        const decodedUrl = decodeURIComponent(url);
        
        // L·∫•y ph·∫ßn cu·ªëi c·ªßa URL (sau d·∫•u / cu·ªëi c√πng)
        const urlParts = decodedUrl.split('/');
        const fullFileName = urlParts[urlParts.length - 1];
        
        // T√°ch UUID v√† t√™n file
        // Format URL th∆∞·ªùng l√†: UUID-originalfilename.ext
        const lastHyphenIndex = fullFileName.lastIndexOf('-');
        const fileNameWithExt = lastHyphenIndex !== -1 
          ? fullFileName.substring(lastHyphenIndex + 1) 
          : fullFileName;
        
        // X√°c ƒë·ªãnh lo·∫°i file t·ª´ ph·∫ßn m·ªü r·ªông
        const fileType = fileNameWithExt.split('.').pop()?.toLowerCase() || '';
        
        console.log('File info:', {
          fullFileName,
          fileNameWithExt,
          fileType
        });
        
        return {
          fileName: fileNameWithExt,
          fileType,
          isImage: ['jpg', 'jpeg', 'png', 'gif'].includes(fileType),
          isVideo: ['mp4', 'mov', 'avi'].includes(fileType),
          isCompressed: ['zip', 'rar', '7z'].includes(fileType),
          isDocument: ['doc', 'docx', 'pdf', 'txt'].includes(fileType)
        };
      } catch (error) {
        console.error('Error parsing file info:', error);
        return {
          fileName: 'Unknown file',
          fileType: '',
          isImage: false,
          isVideo: false,
          isCompressed: false,
          isDocument: false
        };
      }
    };

    const renderFileContent = () => {
      const fileInfo = getFileInfo(item.content);
      
      const getFileIcon = () => {
        const ext = fileInfo.fileType.toLowerCase();
        if (['jpg', 'jpeg', 'png', 'gif'].includes(ext)) {
          return "image";
        }
        if (['mp4', 'mov', 'avi'].includes(ext)) {
          return "videocam";
        }
        if (['pdf'].includes(ext)) {
          return "document-text";
        }
        if (['doc', 'docx'].includes(ext)) {
          return "document";
        }
        if (['xls', 'xlsx'].includes(ext)) {
          return "grid";
        }
        if (['zip', 'rar', '7z'].includes(ext)) {
          return "archive";
        }
        if (['txt'].includes(ext)) {
          return "text";
        }
        return "document";
      };

      const getFileColor = () => {
        const ext = fileInfo.fileType.toLowerCase();
        if (['jpg', 'jpeg', 'png', 'gif'].includes(ext)) return '#FF9500';
        if (['mp4', 'mov', 'avi'].includes(ext)) return '#FF2D55';
        if (['pdf'].includes(ext)) return '#FF3B30';
        if (['doc', 'docx'].includes(ext)) return '#007AFF';
        if (['xls', 'xlsx'].includes(ext)) return '#34C759';
        if (['zip', 'rar', '7z'].includes(ext)) return '#AF52DE';
        if (['txt'].includes(ext)) return '#5856D6';
        return '#8E8E93';
      };

      const handlePreview = () => {
        if (item.content) {
          Linking.openURL(item.content);
        }
      };

      const handleDownload = () => {
        if (item.content) {
          // M·ªü URL trong tr√¨nh duy·ªát ƒë·ªÉ t·∫£i xu·ªëng
          Linking.openURL(item.content);
        }
      };

      const handlePlayVideo = () => {
        if (item.content) {
          Linking.openURL(item.content);
        }
      };

      return (
        <View style={styles.fileContainer}>
          <TouchableOpacity 
            style={[
              styles.fileContentContainer,
              { backgroundColor: isMe ? '#E3F2FD' : '#FFFFFF' },
              styles.elevation
            ]}
            onPress={fileInfo.isVideo ? handlePlayVideo : handlePreview}
          >
            <View style={styles.fileIconWrapper}>
              <View style={[styles.fileIconContainer, { backgroundColor: getFileColor() }]}>
                <Ionicons 
                  name={getFileIcon()}
                  size={22} 
                  color="#FFFFFF"
                />
              </View>
            </View>
            <View style={styles.fileInfoContainer}>
              <Text style={[
                styles.fileType,
                { color: '#1976D2' }
              ]} numberOfLines={1}>
                {fileInfo.fileType.toUpperCase()}
              </Text>
              <Text style={[
                styles.fileName,
                { color: '#2196F3' }
              ]} numberOfLines={1}>
                {fileInfo.fileName}
              </Text>
            </View>
            <View style={styles.actionButtons}>
              {fileInfo.isVideo ? (
                <TouchableOpacity 
                  style={[styles.actionButton, { backgroundColor: '#FF2D55' }]}
                  onPress={handlePlayVideo}
                >
                  <Ionicons 
                    name="play" 
                    size={16} 
                    color="#FFFFFF"
                  />
                </TouchableOpacity>
              ) : (
                <>
                  <TouchableOpacity 
                    style={[styles.actionButton, { backgroundColor: '#1976D2' }]}
                    onPress={handlePreview}
                  >
                    <Ionicons 
                      name="eye-outline" 
                      size={16} 
                      color="#FFFFFF"
                    />
                  </TouchableOpacity>
                  <TouchableOpacity 
                    style={[styles.actionButton, { backgroundColor: '#2196F3' }]}
                    onPress={handleDownload}
                  >
                    <Ionicons 
                      name="cloud-download" 
                      size={16} 
                      color="#FFFFFF"
                    />
                  </TouchableOpacity>
                </>
              )}
            </View>
          </TouchableOpacity>
        </View>
      );
    };

    const renderImageContent = () => {
      return (
        <TouchableOpacity 
          onPress={() => {
            if (item.content) {
              Linking.openURL(item.content);
            }
          }}
          style={[
            styles.imageContainer,
            isMe ? styles.myImageContainer : styles.theirImageContainer
          ]}
        >
          <Image
            source={{ uri: item.content }}
            style={styles.messageImage}
            resizeMode="cover"
          />
        </TouchableOpacity>
      );
    };

    const renderReactions = () => {
      if (!item.reactions || item.reactions.length === 0) {
        return null;
      }

      // Group reactions by emoji
      const reactionGroups = item.reactions.reduce((acc, reaction) => {
        if (!acc[reaction.reaction]) {
          acc[reaction.reaction] = [];
        }
        acc[reaction.reaction].push(reaction);
        return acc;
      }, {} as { [key: string]: MessageReaction[] });

      return (
        <View style={[
          styles.reactionsContainer,
          isMe ? styles.myReactionsContainer : styles.theirReactionsContainer
        ]}>
          {Object.entries(reactionGroups).map(([emoji, reactions]) => (
            <View key={`${item.messageId}-${emoji}`} style={styles.reactionBadge}>
              <Text style={styles.reactionEmojiText}>{emoji}</Text>
              {reactions.length > 1 && (
                <Text style={styles.reactionCount}>{reactions.length}</Text>
              )}
            </View>
          ))}
        </View>
      );
    };

    return (
      <TouchableOpacity
        onLongPress={() => {
          setSelectedMessage(item);
          setShowMessageActions(true);
        }}
        delayLongPress={200}
        activeOpacity={0.7}
      >
        <View style={[styles.messageContainer, isMe ? styles.myMessage : styles.theirMessage]}>
          {!isMe && (
            <Avatar
              rounded
              source={{ uri: avatar || 'https://randomuser.me/api/portraits/men/1.jpg' }}
              size={30}
              containerStyle={styles.avatar}
            />
          )}
          <View style={[styles.messageBubble, isMe ? styles.myBubble : styles.theirBubble]}>
            {isImageMessage(item) ? (
              renderImageContent()
            ) : isFileMessage(item.content) ? (
              renderFileContent()
            ) : (
              <Text style={[styles.messageText, !isMe && { color: '#000' }]}>{item.content}</Text>
            )}
            {renderReactions()}
            <View style={styles.messageFooter}>
              <Text style={[styles.messageTime, !isMe && { color: 'rgba(0, 0, 0, 0.5)' }]}>
                {(() => {
                  try {
                    const date = new Date(item.createdAt);
                    if (isNaN(date.getTime())) {
                      return 'Th·ªùi gian kh√¥ng h·ª£p l·ªá';
                    }
                    return formatDistanceToNow(date, { addSuffix: true, locale: vi });
                  } catch (error) {
                    console.error('Error formatting date:', error);
                    return 'Th·ªùi gian kh√¥ng h·ª£p l·ªá';
                  }
                })()}
              </Text>
              {isMe && (
                <Text style={[
                  styles.messageStatus,
                  item.status === 'read' ? styles.messageStatusRead : styles.messageStatusSent
                ]}>
                  {item.status === 'read' ? '‚úì‚úì' : '‚úì'}
                </Text>
              )}
            </View>
          </View>
        </View>
      </TouchableOpacity>
    );
  };

  // Th√™m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng scroll ho·∫∑c t∆∞∆°ng t√°c v·ªõi FlatList
  const handleUserInteraction = () => {
    if (!hasInteracted) {
      handleScreenFocus();
    }
  };

  // Add useEffect to handle forwarded message
  useEffect(() => {
    if (messageToForward) {
      handleForwardMessage(messageToForward, receiverEmail);
    }
  }, [messageToForward]);

  useEffect(() => {
    const loadMessages = async () => {
      try {
        console.log('Loading messages for:', receiverEmail);
        const response = await getMessages(receiverEmail);
        if (response.success) {
          // S·∫Øp x·∫øp tin nh·∫Øn theo th·ªùi gian tƒÉng d·∫ßn (c≈© nh·∫•t l√™n ƒë·∫ßu)
          const sortedMessages = response.data.sort((a, b) => {
            const dateA = new Date(a.createdAt).getTime();
            const dateB = new Date(b.createdAt).getTime();
            return dateA - dateB;
          });
          setMessages(sortedMessages);
          
          // Mark messages as read if user has interacted with the screen
          if (hasInteracted) {
            const unreadMessages = sortedMessages.filter(
              msg => msg.status !== 'read' && msg.senderEmail === receiverEmail
            );
            
            // Batch mark messages as read
            if (unreadMessages.length > 0) {
              const messageIds = unreadMessages.map(msg => msg.messageId);
              if (socket.current) {
                socket.current.emit('messagesRead', {
                  messageIds,
                  senderEmail: receiverEmail
                });
              }
            }
          }
        }
      } catch (error) {
        console.error('Error loading messages:', error);
      } finally {
        setLoading(false);
      }
    };

    // Load messages initially
    loadMessages();

    // Set up polling interval
    const interval = setInterval(loadMessages, 3000);

    // Clean up interval on unmount
    return () => clearInterval(interval);
  }, [receiverEmail, hasInteracted]);

  const renderReactionAndActionModal = () => {
    return (
      <Modal
        visible={showMessageActions}
        transparent
        animationType="fade"
        onRequestClose={() => setShowMessageActions(false)}
      >
        <TouchableOpacity 
          style={styles.modalOverlay}
          activeOpacity={1}
          onPress={() => setShowMessageActions(false)}
        >
          <View style={styles.modalContent}>
            {selectedMessage && (
              <View style={styles.messageActions}>
                {/* Reactions Section */}
                <View style={styles.reactionsSection}>
                  {REACTIONS.map((reaction) => (
                    <TouchableOpacity
                      key={reaction.name}
                      style={styles.reactionButton}
                      onPress={() => {
                        handleReaction(selectedMessage.messageId, reaction.emoji);
                        setShowMessageActions(false);
                      }}
                    >
                      <Text style={styles.reactionEmoji}>{reaction.emoji}</Text>
                    </TouchableOpacity>
                  ))}
                </View>

                {/* Message Actions Section */}
                <View style={styles.messageActionsSection}>
                  {/* Common actions for all messages */}
                  <TouchableOpacity 
                    style={styles.messageActionButton}
                    onPress={() => {
                      setShowMessageActions(false);
                      handleCopyText(selectedMessage);
                    }}
                  >
                    <Ionicons name="copy-outline" size={24} color="#666" />
                    <Text style={styles.messageActionText}>Sao ch√©p</Text>
                  </TouchableOpacity>

                  <TouchableOpacity 
                    style={styles.messageActionButton}
                    onPress={() => {
                      setShowMessageActions(false);
                      setSelectedMessageForActions(selectedMessage);
                      setShowForwardModal(true);
                    }}
                  >
                    <Ionicons name="share-outline" size={24} color="#666" />
                    <Text style={styles.messageActionText}>Chuy·ªÉn ti·∫øp</Text>
                  </TouchableOpacity>

                  {/* Actions only for own messages */}
                  {selectedMessage.senderEmail !== receiverEmail && (
                    <>
                      {(() => {
                        const messageTime = new Date(selectedMessage.createdAt).getTime();
                        const currentTime = new Date().getTime();
                        const timeDiff = currentTime - messageTime;
                        const canRecall = timeDiff <= 2 * 60 * 1000; // 2 ph√∫t
                        return canRecall && (
                          <TouchableOpacity 
                            style={styles.messageActionButton}
                            onPress={() => {
                              setShowMessageActions(false);
                              handleRecall(selectedMessage.messageId);
                            }}
                          >
                            <Ionicons name="refresh" size={24} color="#666" />
                            <Text style={styles.messageActionText}>Thu h·ªìi</Text>
                          </TouchableOpacity>
                        );
                      })()}

                      <TouchableOpacity 
                        style={styles.messageActionButton}
                        onPress={() => {
                          setShowMessageActions(false);
                          handleDelete(selectedMessage.messageId);
                        }}
                      >
                        <Ionicons name="trash" size={24} color="#666" />
                        <Text style={styles.messageActionText}>X√≥a</Text>
                      </TouchableOpacity>
                    </>
                  )}
                </View>
              </View>
            )}
          </View>
        </TouchableOpacity>
      </Modal>
    );
  };

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: '#fff' }} edges={['top', 'bottom', 'left', 'right']}>
      <StatusBar backgroundColor="#0068ff" barStyle="light-content" />
      
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.headerLeft}>
          <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
            <Ionicons name="arrow-back" size={24} color="#fff" />
          </TouchableOpacity>
          <View style={styles.userInfo}>
            <Avatar
              rounded
              source={{ uri: avatar || 'https://randomuser.me/api/portraits/men/1.jpg' }}
              size={40}
            />
            <View style={styles.nameContainer}>
              <Text style={styles.userName}>{fullName}</Text>
              <Text style={styles.lastSeen}>
                {lastSeen ? formatDistanceToNow(new Date(lastSeen), { addSuffix: true, locale: vi }) : 'ƒêang ho·∫°t ƒë·ªông'}
              </Text>
            </View>
          </View>
        </View>
        
        <View style={styles.headerRight}>
          <TouchableOpacity style={styles.headerIcon}>
            <Ionicons name="call" size={24} color="#fff" />
          </TouchableOpacity>
          <TouchableOpacity style={styles.headerIcon}>
            <Ionicons name="videocam" size={24} color="#fff" />
          </TouchableOpacity>
          <TouchableOpacity style={styles.headerIcon}>
            <Ionicons name="ellipsis-vertical" size={24} color="#fff" />
          </TouchableOpacity>
        </View>
      </View>

      {/* Chat Content */}
      <View style={{ flex: 1 }}>
        <KeyboardAvoidingView
          style={styles.chatContent}
          behavior={Platform.OS === 'ios' ? 'padding' : undefined}
          keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}
        >
          <FlatList
            ref={flatListRef}
            data={messages}
            renderItem={renderMessage}
            keyExtractor={(item) => `${item.messageId}_${item.createdAt}`}
            style={styles.flatList}
            contentContainerStyle={styles.messagesList}
            onScroll={handleUserInteraction}
            onTouchStart={handleUserInteraction}
            removeClippedSubviews={true}
            maxToRenderPerBatch={10}
            windowSize={10}
            initialNumToRender={15}
            onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}
            onLayout={() => flatListRef.current?.scrollToEnd({ animated: true })}
          />

          {/* Emoji Picker */}
          {showEmojis && (
            <View style={styles.emojiContainer}>
              <ScrollView 
                horizontal={false} 
                showsVerticalScrollIndicator={false}
                contentContainerStyle={styles.emojiScrollContainer}
              >
                <View style={styles.emojiGrid}>
                  {EMOJIS.map((emoji, index) => (
                    <TouchableOpacity
                      key={index}
                      style={styles.emojiButton}
                      onPress={() => handleEmojiPress(emoji)}
                    >
                      <Text style={styles.emojiText}>{emoji}</Text>
                    </TouchableOpacity>
                  ))}
                </View>
              </ScrollView>
            </View>
          )}

          {/* Hi·ªÉn th·ªã typing indicator ·ªü ƒë√¢y, tr∆∞·ªõc input bar */}
          {isTyping && (
            <View style={[styles.typingContainer, { backgroundColor: '#e6f7ff', borderWidth: 1, borderColor: '#91d5ff' }]}>
              <Text style={[styles.typingText, { color: '#1890ff' }]}>ƒêang so·∫°n tin nh·∫Øn...</Text>
            </View>
          )}

          {/* Bottom Input Bar */}
          <View style={styles.inputContainer}>
            <View style={styles.inputWrapper}>
              <TouchableOpacity 
                style={styles.inputIcon}
                onPress={() => setShowEmojis(!showEmojis)}
              >
                <Ionicons 
                  name={showEmojis ? "close-outline" : "happy-outline"} 
                  size={24} 
                  color="#666" 
                />
              </TouchableOpacity>
              <TextInput
                style={styles.input}
                placeholder="Tin nh·∫Øn"
                placeholderTextColor="#666"
                value={newMessage}
                onChangeText={handleMessageChange}
                multiline
              />
              <View style={styles.inputRightIcons}>
                <TouchableOpacity style={styles.inputIcon}>
                  <Ionicons name="ellipsis-horizontal" size={24} color="#666" />
                </TouchableOpacity>
                <TouchableOpacity style={styles.inputIcon}>
                  <Ionicons name="mic-outline" size={24} color="#666" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={styles.inputIcon}
                  onPress={handleImagePick}
                  disabled={uploading}
                >
                  <Ionicons name="image-outline" size={24} color="#666" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={styles.inputIcon}
                  onPress={handleVideoPick}
                  disabled={uploading}
                >
                  <Ionicons name="videocam-outline" size={24} color="#666" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={styles.inputIcon}
                  onPress={handleFilePick}
                  disabled={uploading}
                >
                  <Ionicons name="document-outline" size={24} color="#666" />
                </TouchableOpacity>
                {newMessage.trim() && (
                  <TouchableOpacity 
                    style={styles.sendButton}
                    onPress={handleSendMessage}
                  >
                    <Ionicons name="send" size={24} color="#fff" />
                  </TouchableOpacity>
                )}
              </View>
            </View>
          </View>
        </KeyboardAvoidingView>

        {renderReactionAndActionModal()}

        {/* Forward Modal */}
        <Modal
          visible={showForwardModal}
          transparent
          animationType="slide"
          onRequestClose={() => setShowForwardModal(false)}
        >
          <View style={styles.forwardModalContainer}>
            <View style={styles.forwardModalContent}>
              <View style={styles.forwardModalHeader}>
                <Text style={styles.forwardModalTitle}>Chuy·ªÉn ti·∫øp tin nh·∫Øn</Text>
                <TouchableOpacity
                  onPress={() => setShowForwardModal(false)}
                  style={styles.closeButton}
                >
                  <Ionicons name="close" size={24} color="#666" />
                </TouchableOpacity>
              </View>
              
              <View style={styles.searchContainer}>
                <Ionicons name="search" size={20} color="#666" style={styles.searchIcon} />
                <TextInput
                  style={styles.searchInput}
                  placeholder="T√¨m ki·∫øm b·∫°n b√®"
                  value={searchQuery}
                  onChangeText={setSearchQuery}
                />
              </View>

              <FlatList
                data={friends.filter(friend => 
                  friend.fullName.toLowerCase().includes(searchQuery.toLowerCase())
                )}
                keyExtractor={(item) => item.email}
                renderItem={({ item }) => (
                  <TouchableOpacity
                    style={styles.friendItem}
                    onPress={() => selectedMessageForActions && handleForwardMessage(selectedMessageForActions, item.email)}
                  >
                    <Avatar
                      rounded
                      source={{ uri: item.avatar || 'https://randomuser.me/api/portraits/men/1.jpg' }}
                      size={40}
                    />
                    <Text style={styles.friendName}>{item.fullName}</Text>
                  </TouchableOpacity>
                )}
              />
            </View>
          </View>
        </Modal>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    backgroundColor: '#0068ff',
    padding: 10,
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  headerLeft: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
  },
  backButton: {
    marginRight: 10,
  },
  userInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  nameContainer: {
    marginLeft: 10,
  },
  userName: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  lastSeen: {
    color: '#fff',
    fontSize: 12,
    opacity: 0.8,
  },
  headerRight: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  headerIcon: {
    marginLeft: 15,
  },
  chatContent: {
    flex: 1,
    backgroundColor: '#fff',
  },
  flatList: {
    flex: 1,
  },
  messagesList: {
    padding: 10,
    paddingBottom: 20,
  },
  messageContainer: {
    flexDirection: 'row',
    marginVertical: 5,
    alignItems: 'flex-end',
  },
  myMessage: {
    justifyContent: 'flex-end',
  },
  theirMessage: {
    justifyContent: 'flex-start',
  },
  avatar: {
    marginRight: 8,
  },
  messageBubble: {
    maxWidth: '70%',
    padding: 10,
    borderRadius: 15,
  },
  myBubble: {
    backgroundColor: '#0068ff',
    borderBottomRightRadius: 5,
  },
  theirBubble: {
    backgroundColor: '#f0f0f0',
    borderBottomLeftRadius: 5,
  },
  messageText: {
    fontSize: 16,
    color: '#fff',
  },
  messageFooter: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'flex-end',
    marginTop: 4,
  },
  messageTime: {
    fontSize: 10,
    color: 'rgba(255, 255, 255, 0.7)',
    marginRight: 4,
  },
  messageStatus: {
    fontSize: 12,
    marginLeft: 2,
  },
  messageStatusSent: {
    color: 'rgba(255, 255, 255, 0.5)', // M√†u x√°m cho tin nh·∫Øn ƒë√£ g·ª≠i
  },
  messageStatusRead: {
    color: '#fff', // M√†u tr·∫Øng cho tin nh·∫Øn ƒë√£ xem
    fontWeight: 'bold', // Th√™m ƒë·ªô ƒë·∫≠m ƒë·ªÉ d·ªÖ nh·∫≠n bi·∫øt h∆°n
  },
  inputContainer: {
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
    padding: 10,
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
    borderRadius: 20,
    paddingHorizontal: 10,
  },
  input: {
    flex: 1,
    minHeight: 40,
    maxHeight: 100,
    paddingHorizontal: 10,
    fontSize: 16,
  },
  inputIcon: {
    padding: 5,
  },
  inputRightIcons: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  sendButton: {
    backgroundColor: '#0068ff',
    borderRadius: 20,
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 5,
  },
  typingContainer: {
    padding: 8,
    paddingHorizontal: 15,
    backgroundColor: '#f0f0f0',
    borderRadius: 16,
    marginHorizontal: 10,
    marginBottom: 8,
    alignSelf: 'flex-start',
    marginTop: 5,
    elevation: 2, // Th√™m ƒë·ªï b√≥ng cho Android
    shadowColor: '#000', // Th√™m ƒë·ªï b√≥ng cho iOS
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 1.5,
  },
  typingText: {
    color: '#666',
    fontSize: 12,
    fontStyle: 'italic',
  },
  emojiContainer: {
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
    maxHeight: 200,
    width: '100%',
  },
  emojiScrollContainer: {
    paddingVertical: 10,
  },
  emojiGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'flex-start',
    paddingHorizontal: 10,
    width: '100%',
  },
  emojiButton: {
    width: '11.11%', // 9 emoji m·ªói h√†ng thay v√¨ 8
    aspectRatio: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 4,
  },
  emojiText: {
    fontSize: 20, // Gi·∫£m k√≠ch th∆∞·ªõc font xu·ªëng m·ªôt ch√∫t
    color: '#000',
    textAlign: 'center',
  },
  imageContainer: {
    borderRadius: 10,
    overflow: 'hidden',
    maxWidth: '100%',
  },
  myImageContainer: {
    alignSelf: 'flex-end',
  },
  theirImageContainer: {
    alignSelf: 'flex-start',
  },
  messageImage: {
    width: 200,
    height: 200,
    borderRadius: 10,
  },
  imageBubble: {
    padding: 2,
    backgroundColor: 'transparent',
  },
  fileContainer: {
    maxWidth: '85%',
    minWidth: 220,
    marginVertical: 2,
  },
  fileContentContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
    borderRadius: 12,
  },
  elevation: {
    ...Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
      android: {
        elevation: 3,
      },
    }),
  },
  fileIconWrapper: {
    marginRight: 12,
  },
  fileIconContainer: {
    width: 42,
    height: 42,
    borderRadius: 10,
    justifyContent: 'center',
    alignItems: 'center',
  },
  fileInfoContainer: {
    flex: 1,
    marginRight: 8,
  },
  fileType: {
    fontSize: 12,
    fontWeight: '600',
    marginBottom: 2,
    letterSpacing: 0.5,
  },
  fileName: {
    fontSize: 13,
    fontWeight: '500',
  },
  actionButtons: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  actionButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: 'white',
    borderRadius: 15,
    padding: 15,
    margin: 20,
    maxWidth: '90%',
  },
  messageActions: {
    backgroundColor: 'white',
    borderRadius: 15,
    padding: 15,
    width: '90%',
    maxWidth: 300,
  },
  reactionsSection: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
    paddingBottom: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
    gap: 2,
  },
  reactionButton: {
    padding: 4,
    marginHorizontal: 2,
  },
  reactionEmoji: {
    fontSize: 18,
    marginHorizontal: 1,
  },
  messageActionsSection: {
    marginTop: 10,
  },
  messageActionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  messageActionText: {
    marginLeft: 15,
    fontSize: 16,
    color: '#0068ff',
  },
  forwardModalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  forwardModalContent: {
    backgroundColor: '#fff',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    height: '80%',
    padding: 20,
  },
  forwardModalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  forwardModalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  closeButton: {
    padding: 5,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
    borderRadius: 10,
    paddingHorizontal: 10,
    marginBottom: 15,
  },
  searchIcon: {
    marginRight: 10,
  },
  searchInput: {
    flex: 1,
    height: 40,
    fontSize: 16,
  },
  friendItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  friendName: {
    marginLeft: 15,
    fontSize: 16,
    color: '#333',
  },
  reactionsContainer: {
    flexDirection: 'row',
    position: 'absolute',
    bottom: -8,
    backgroundColor: 'white',
    borderRadius: 6,
    paddingHorizontal: 2,
    paddingVertical: 0,
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 0.5 },
    shadowOpacity: 0.1,
    shadowRadius: 0.5,
    zIndex: 1,
    maxWidth: '100%',
    flexWrap: 'wrap',
    justifyContent: 'center',
    alignItems: 'center',
  },
  myReactionsContainer: {
    left: 4,
  },
  theirReactionsContainer: {
    right: 4,
  },
  reactionBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'transparent',
    borderRadius: 3,
    paddingHorizontal: 1,
    paddingVertical: 0,
    marginRight: 1,
    borderWidth: 0,
  },
  reactionEmojiText: {
    fontSize: 8,
    lineHeight: 8,
  },
  reactionCount: {
    fontSize: 6,
    color: '#666',
    marginLeft: 0,
  },
  recalledBubble: {
    backgroundColor: '#f0f0f0',
    opacity: 0.8,
  },
  recalledText: {
    color: '#666',
    fontStyle: 'italic',
    fontSize: 14,
  },
});

export default ChatScreen; 